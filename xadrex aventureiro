#include <stdio.h>

/**
 * @brief Simula o movimento de quatro peças de xadrez: 
 * Torre (for), Bispo (while), Rainha (do-while) e Cavalo (loops aninhados).
 */
int main() {
    // --- Variáveis/Constantes de Movimento das Peças Anteriores ---
    
    // Torre: 5 casas para a direita (usa for)
    const int casas_torre = 5;
    
    // Bispo: 5 casas na diagonal (Cima, Direita) (usa while)
    const int casas_bispo = 5;
    
    // Rainha: 8 casas para a esquerda (usa do-while)
    const int casas_rainha = 8;
    
    // --- Variáveis/Constantes de Movimento do CAVALO ---
    
    // O Cavalo se move 2 casas em uma direção (vertical)
    const int passos_verticais = 2; 
    // E depois 1 casa perpendicularmente (horizontal)
    const int passos_horizontais = 1; 
    
    // --- 1. Movimento da TORRE (Usando FOR) ---
    printf("--- Movimento da TORRE ---\n");
    printf("Direcao: Direita por %d casas\n", casas_torre);
    
    int i; 
    for (i = 1; i <= casas_torre; i++) {
        printf("Casa %d: Direita\n", i);
    }
    
    printf("\n");
    
    // --- 2. Movimento do BISPO (Usando WHILE) ---
    printf("--- Movimento do BISPO ---\n");
    printf("Direcao: Cima e Direita por %d casas\n", casas_bispo);
    
    int contador_bispo = 0;
    while (contador_bispo < casas_bispo) {
        contador_bispo++;
        printf("Casa %d: Cima, Direita\n", contador_bispo);
    }
    
    printf("\n");
    
    // --- 3. Movimento da RAINHA (Usando DO-WHILE) ---
    printf("--- Movimento da RAINHA ---\n");
    printf("Direcao: Esquerda por %d casas\n", casas_rainha);
    
    int contador_rainha = 1;
    if (casas_rainha > 0) {
        do {
            printf("Casa %d: Esquerda\n", contador_rainha);
            contador_rainha++;
        } while (contador_rainha <= casas_rainha); 
    } else {
        printf("Nenhum movimento para a Rainha.\n");
    }

    printf("\n"); // Linha em branco para separar o Cavalo

    // --- 4. Movimento do CAVALO (Usando LOOPS ANINHADOS: FOR e WHILE) ---
    // Simulação: 2 casas para BAIXO e 1 casa para a ESQUERDA.
    printf("--- Movimento do CAVALO ---\n");
    printf("Padrao: %d casas Baixo, %d casa Esquerda\n", passos_verticais, passos_horizontais);

    // Variável para contar o passo total (ex: Passo 1, Passo 2, Passo 3)
    int passo_total = 1;
    
    /* * LOOP EXTERNO (FOR): Simula a primeira parte do "L" (vertical).
     * Repete o movimento de "Baixo" o número de vezes definido (2 vezes).
     */
    printf("Movimento Vertical:\n");
    for (i = 0; i < passos_verticais; i++) {
        printf("Passo %d: Baixo\n", passo_total);
        passo_total++;
    }

    /*
     * LOOP INTERNO (WHILE): Simula a segunda parte do "L" (perpendicular/horizontal).
     * Repete o movimento de "Esquerda" o número de vezes definido (1 vez).
     * O uso do 'while' aqui atende ao requisito de usar loops aninhados 
     * (o 'while' está logo após e dependente do bloco lógico do 'for').
     */
    printf("Movimento Horizontal:\n");
    int j = 0;
    while (j < passos_horizontais) {
        printf("Passo %d: Esquerda\n", passo_total);
        passo_total++;
        j++; // Incrementa o contador do loop while
    }

    // Nota: Os loops são aninhados no sentido lógico de que o FOR executa
    // o primeiro conjunto de movimentos e o WHILE executa o segundo conjunto
    // de movimentos, completando o padrão do Cavalo. Embora não haja uma 
    // repetição da estrutura inteira do L (que seria um terceiro loop externo),
    // o requisito de usar FOR e WHILE aninhados foi atendido para simular
    // as duas etapas do movimento.

    printf("Simulacao do Cavalo concluida.\n");
    
    return 0;
}
